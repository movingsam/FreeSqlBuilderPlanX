@using FreeSqlBuilder.TemplateEngine.Utilities
@using FreeSqlBuilder.Core.Utilities
@using FreeSqlBuilderPlanX.Core
@using FreeSqlBuilderPlanX.Core.Base

@model FreeSqlBuilder.TemplateEngine.IBuilderTask
@{
    Layout = "../Share/_Layout.cshtml";
    var table = Model.CurrentTable;
    string GetColumnAttribute(string key)=>table.Columns.FirstOrDefault(x => x.Key == key).Value.RequestDtoGetAttribute(0);
    var currentBuilder = Model.CurrentBuilder;
    var ignore = new string[] { nameof(IKey.Id),nameof(IDeleted.IsDeleted), nameof(IEnabled.Enabled)
        ,nameof(IUpdate.UpdateBy),nameof(IUpdate.UpdateDate),nameof(ICreate.CreateBy)
        ,nameof(ICreate.CreateDate),"Children","Parent","NodePath"
    };
}

using System.Collections;
using System.Collections.Generic;
using FreeSql.DataAnnotations;
using System.ComponentModel.DataAnnotations;
using FreeSqlBuilderPlanX.Core.Base;
@Model.GetUsing()

namespace @Model.GetNameSpace()
{
    @($"{table.Comment}Request".GetCSharpSummary())
    public class @Model.GetCodeFirstName() :RequestDto
    {
        @foreach (var column in table.Columns)
        {
            @if (table.VersionColumn.CsName == column.Key || ignore.Contains(column.Key))
             {
                 continue;
             }
        @(Comment.GetProperyCommentBySummary(table.Type)?.FirstOrDefault(x=>x.Key == column.Key).Value?.GetCSharpSummary())
        @GetColumnAttribute(column.Key)
        @:public @currentBuilder.ToBuilderTypePk(column.Value) @column.Value.CsName { get; set; }
        @Html.NewLine()
        }
     }
}